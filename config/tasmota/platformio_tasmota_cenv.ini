[env:tasmota-rangeextender]
build_flags                 = ${env.build_flags}
                              -D FIRMWARE_RANGE_EXTENDER
                              -D PIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH
                              -D USE_WIFI_RANGE_EXTENDER
                              -D USE_WIFI_RANGE_EXTENDER_NAPT

[env:tasmota32-rangeextender]
extends                     = env:tasmota32_base
build_flags                 = ${env:tasmota32_base.build_flags}
                              -D FIRMWARE_TASMOTA32
                              -D USE_WIFI_RANGE_EXTENDER
                              -D USE_WIFI_RANGE_EXTENDER_NAPT

; *** Debug version used for PlatformIO Home Project Inspection
[env:tasmota-debug]
build_type                  = debug
build_unflags               = ${env.build_unflags}
build_flags                 = ${env.build_flags}
;                              -Wstack-usage=300

[env:tasmota32-debug]
extends                     = env:tasmota32_base
build_type                  = debug
build_unflags               = ${env:tasmota32_base.build_unflags}
build_flags                 = ${env:tasmota32_base.build_flags}
monitor_filters             = esp32_exception_decoder
;                              -Wstack-usage=300

; *** JTAG Debug version, needs esp-prog or FT2232H or FT232H
; *** Install howto for Windows https://community.platformio.org/t/esp32-pio-unified-debugger/4541/20
[env:tasmota32-ocd]
build_type              = debug
extends                 = env:tasmota32_base
debug_tool              = esp-prog
upload_protocol         = esp-prog
debug_init_break        = tbreak setup
build_unflags           = ${env:tasmota32_base.build_unflags}
build_flags             = ${env:tasmota32_base.build_flags}
monitor_filters         = esp32_exception_decoder

; *** JTAG Debug version, needs esp-prog or FT2232H or FT232H
[env:tasmota32solo1-ocd]
build_type              = debug
extends                 = env:tasmota32solo1
platform                = ${core32solo1.platform}
platform_packages       = ${core32solo1.platform_packages}
board                   = esp32_solo1_4M
debug_tool              = esp-prog
upload_protocol         = esp-prog
debug_init_break        = tbreak setup
build_unflags           = ${core32solo1.build_unflags}
build_flags             = ${core32solo1.build_flags}
monitor_filters         = esp32_exception_decoder

; *** alpha S3 Version
[env:tasmota32s3]
extends                 = env:tasmota32_base
board                   = esp32s3
build_flags             = ${env:tasmota32_base.build_flags} -D FIRMWARE_BLUETOOTH
lib_extra_dirs          =
                          lib/lib_basic
                          lib/lib_ssl
                          lib/lib_i2c
                          lib/lib_rf
                          lib/lib_div
                          lib/lib_display
                          lib/lib_audio
                          lib/libesp32
                          lib/libesp32_lvgl
                          lib/libesp32_div
                          lib/libesp32_eink
lib_ignore              =
                          TTGO TWatch Library
                          Micro-RTSP
                          epdiy
#----

; *********************************************************************
[platformio]
; For best Gitpod performance remove the ";" in the next line. Needed 
; Platformio files are cached and installed at first run
;core_dir = .platformio

; *** Build/upload environment
default_envs =
; *** Uncomment the line(s) below to select version(s) that will be build
;     by default. Commented versions can still be build individually from
;     VSCode or command line
                tasmota-dialedin
                tasmota-useelink
                tasmota-athom
;                tasmota32-foo
;                tasmota32-grizzly

; *********************************************************************
; Common section can override global parameters for all builds
[common]

; *** Upload Serial reset method for Wemos and NodeMCU
upload_port               = COM4

; *********************************************************************
; This section show how to create 2 alternative binaries : tasmota-foo.bin
; and tasmota-bar.bin. Those binaries are derived form tasmota.bin and 
; customization is defined in user_config_override.h 
; Those binaries are for ESP8266
; The name after the env: tag will give its name to the binary
[env:tasmota-dialedin]
build_flags = ${env.build_flags} -DFIRMWARE_DIALED

[env:tasmota-useelink]
build_flags = ${env.build_flags} -DFIRMWARE_USEE

[env:tasmota-athom]
build_flags = ${env.build_flags} -DFIRMWARE_ATHOM

; *********************************************************************
; Similar exemple for ESP32
; Note that you must explicitly state that they derive from `tasmota32`
[env:tasmota32-foo]
extends = env:tasmota32_base
build_flags             = ${env:tasmota32_base.build_flags} -DFIRMWARE_FOO

[env:tasmota32-grizzly]
extends = env:tasmota32_base
build_flags             = ${env:tasmota32_base.build_flags} -DFIRMWARE_GRIZZLY
