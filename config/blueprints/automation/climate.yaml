blueprint:
  name: Climate
  description: |
    Climate Controller (heat only) - v0.1.2
    Control a heater from temperature input with optional RGB display of current temp
  domain: automation
  source_url: https://github.com/darkxst/hascripts/blob/main/config/blueprints/automation/climate.yaml
  input:
    setTemp:
      name: Set Temparture
      description: Set Point Temperature input
      selector:
        entity:
          domain: input_number
    deltaTemp:
      name: Delta Temp
      description: Low temperature delta input (turn on heater below this). Recommend a value around ~2°C
      selector:
        entity:
          domain: input_number
    sensor:
      name: Temperature Sensor
      description: sensor to monitor temperature
      selector:
        entity:
          domain: sensor
    power_id:
      name: Heater Device
      description: Device to control
      selector:
        entity:
          domain:
            - input_boolean
            - switch
    rgb_id:
      name: RGB Device
      description: Display current temperature via RGB LED (Optional)
      default: ""
      selector:
        entity:
          domain: light
    rgbBrightness:
      name: RGB Brightness
      default: 160
      selector:
        number:
          min: 0
          max: 255
          mode: slider
    rgbDelta:
      name: RGB Delta
      description: Temperature range for display, this value will be added/substracted from the Set Temperature
      default: 4
      selector:
        number:
          min: 2
          max: 10
          unit_of_measurement: "°C"

variables:
  Ts: !input setTemp
  Td: !input deltaTemp
  PowerId: !input power_id
  rgb_target: !input rgb_id

trigger:
  - platform: state
    entity_id:
      - !input sensor

condition: []

action:
  - variables:
      TCurrent: "{{ trigger.to_state.state | float }}"
      THigh: "{{ states(Ts) | float }}"
      TLow: "{{ THigh - states(Td) | float }}"
      Action: >
        {% if TCurrent  > THigh and is_state(PowerId, 'on') %}
          off
        {% elif TCurrent <= TLow and is_state(PowerId, 'off') %}
          on
        {% else %}
          skip
        {% endif %}
  - choose:
      - conditions: "{{ Action != 'skip' }}"
        sequence:
          - service: >
              {{ states[PowerId].domain ~ '.turn_' ~ Action }}
            entity_id: !input power_id
  - choose:
      - conditions: "{{ rgb_target|length > 0 }}"
        alias: "map current temperature to hue and set RGB colour"
        sequence:
          - variables:
              Rd: !input rgbDelta
              hue: "{{ -240/(Rd*2) * (TCurrent - THigh - Rd) }}"
              hlim: "{{ ([0,hue|round,240]|sort)[1] }}"
          - service: light.turn_on
            data:
              brightness: !input rgbBrightness
              hs_color: "[{{ hlim }}, 100]"
              entity_id: !input rgb_id
