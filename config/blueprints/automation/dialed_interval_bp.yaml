blueprint:
  name: Interval Power Cycle
  description: Turn a device based on a timed interval
  domain: automation
  input:
    duration:
      name: Duration
      description: Length of runtime
      selector:
        entity:
          domain: input_number
    interval:
      name: Interval
      description: cycle time
      selector:
        entity:
          domain: input_number
    condition_entity:
      name: Condition
      description: Conditional only run if entity ID is active
      default: {}
      selector:
        entity:
          domain: switch
    fan_id:
      name: Device(s)
      description: Device to control
      selector:
        target:
          entity:
            domain: switch
variables:
  duration: !input duration
  interval: !input interval
  condition_entity: !input condition_entity

trigger:
  - platform: time_pattern
    minutes: "/1"

condition:
  - condition: template
    value_template: >-
      {{ now().minute % states(interval)|int == 0 and 
         (states(condition_entity) == 'on' or states(condition_entity) == 'unknown')}}

action:
  - service: switch.turn_on
    target: !input fan_id
  - delay: "{{ states(duration) | int * 60 }}"
  - service: switch.turn_off
    target: !input fan_id
